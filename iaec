#!/usr/bin/perl -w

use FRDCSA::IAEC;
use FRDCSA::IAEC::EdgeFunction;
use FRDCSA::IAEC::NodeDatumAndMetadatum;
use FRDCSA::IAEC::Datum;
use FRDCSA::IAEC::Metadatum;

use KBS2::Util;

use Data::Compare;
use Data::Dumper;

$UNIVERSAL::debug = 0;

my $nodedatumandmetadatum = FRDCSA::IAEC::NodeDatumAndMetadatum->new
    (
     Datum => FRDCSA::IAEC::Datum->new(Datum => ['/home/andrewdo/morbini-phd-thesis.pdf']),
     Metadatum => FRDCSA::IAEC::Metadatum->new(Metadatum => [['isa',Var('?Input'),'string']]),
    );

sub IsStringP {
  my (@input) = @_;
  return scalar $input[0];
}

sub ProcessEffectForPredicate {
  my (%args) = @_;
  if (Compare($args{Result},[1])) {
    # update the metadata of the original
    my $metadatum_serialized = $args{NodeDatumAndMetadatum}->Metadatum->Serialize;
    my $res1 = $args{NodeDatumAndMetadatum}->Metadatum->ProcessMetadatumEffect
      (
       ReturnValue => 1,
       Method => $args{Method},
       Candidate => $args{Candidate},
      );
    if ($res1->{Success}) {
      delete $args{NodeDataAndMetadata}->{$args{NodeDatumAndMetadatum}->Datum->Serialize}{$metadatum_serialized};
      $args{NodeDatumAndMetadatum}->Metadatum($res1->{Metadatum});
      $args{NodeDataAndMetadata}->{$args{NodeDatumAndMetadatum}->Datum->Serialize}{$args{NodeDatumAndMetadatum}->Metadatum->Serialize} =
	$args{NodeDatumAndMetadatum};
    }
  } else { # if (Compare($args{Result},[0])) {
    # update the metadata of the original
    my $metadatum_serialized = $args{NodeDatumAndMetadatum}->Metadatum->Serialize;
    my $res1 = $args{NodeDatumAndMetadatum}->Metadatum->ProcessMetadatumEffect
      (
       ReturnValue => 0,
       Method => $args{Method},
       Candidate => $args{Candidate},
      );
    if ($res1->{Success}) {
      delete $args{NodeDataAndMetadata}->{$args{NodeDatumAndMetadatum}->Datum->Serialize}{$metadatum_serialized};
      $args{NodeDatumAndMetadatum}->Metadatum($res1->{Metadatum});
      $args{NodeDataAndMetadata}->{$args{NodeDatumAndMetadatum}->Datum->Serialize}{$args{NodeDatumAndMetadatum}->Metadatum->Serialize} =
	$args{NodeDatumAndMetadatum};
    }
  }
}


sub ProcessMetadatumEffectForPredicate {
  my (%args) = @_;
  print Dumper({MyArgs => \%args}) if $UNIVERSAL::debug > 3;
  my $assertions = [];
  if (exists $args{ValueForTrue}) {
    # check if we succeeded, and if so, assert this
    if ($args{ReturnValue} == 1) {
      $assertions = [['assert',$args{ValueForTrue}]];
    } elsif ($args{ReturnValue} == 0) {
      $assertions = [['assert',['neg',$args{ValueForTrue}]]];
    } else {
      die "ouch\n";
    }
  }
  return
    {
     Success => 1,
     Assertions => $assertions,
    };
}

my $iaec = FRDCSA::IAEC->new
  (
   EdgeFunctions =>
   {
    isFilenameP => FRDCSA::IAEC::EdgeFunction->new
    (
     Name => 'isFilenameP',
     Precondition => sub { IsStringP(@_); },
     MetadatumPrecondition => [['isa',Var('?Input'),'string'],['unknown',['isa',Var('?Input'),'existingFilename']]],
     EdgeFunction => sub { -f $_[0] },
     Effect => sub {ProcessEffectForPredicate(@_)},
     MetadatumEffect => sub {
       ProcessMetadatumEffectForPredicate
	 (
	  ValueForTrue => ['isa',Var('?Input'),'existingFilename'],
	  @_,
	 )
       },
    ),
    isDirectoryP => FRDCSA::IAEC::EdgeFunction->new
    (
     Name => 'isDirectoryP',
     Precondition => sub { IsStringP(@_); },
     MetadatumPrecondition => [['isa',Var('?Input'),'string'],['unknown',['isa',Var('?Input'),'existingDirname']]],
     EdgeFunction => sub { -d $_[0] },
     Effect => sub {ProcessEffectForPredicate(@_)},
     MetadatumEffect => sub {
       ProcessMetadatumEffectForPredicate
	 (
	  ValueForTrue => ['isa',Var('?Input'),'existingDirname'],
	  @_,
	 )
       },
    ),
    executableFilenameP => FRDCSA::IAEC::EdgeFunction->new
    (
     Name => 'executableFilenameP',
     Precondition => sub { IsStringP(@_); },
     MetadatumPrecondition => [['isa',Var('?Input'),'string'],['unknown',['hasProperty',Var('?Input'),'executable']]],
     EdgeFunction => sub { -x $_[0] },
     Effect => sub {ProcessEffectForPredicate(@_)},
     MetadatumEffect => sub {
       ProcessMetadatumEffectForPredicate
	 (
	  ValueForTrue => ['hasProperty',Var('?Input'),'executable'],
	  @_,
	 );
       },
    ),
    hasPDFExtension => FRDCSA::IAEC::EdgeFunction->new
    (
     Name => 'hasPDFExtension',
     Precondition => sub { IsStringP(@_); },
     MetadatumPrecondition => [['isa',Var('?Input'),'existingFilename'],['unknown',['hasExtension',Var('?Input'),'pdf']]],
     EdgeFunction => sub { $_[0] =~ /\.pdf$/i },
     Effect => sub {ProcessEffectForPredicate(@_)},
     MetadatumEffect => sub {
       ProcessMetadatumEffectForPredicate
	 (
	  ValueForTrue => ['hasExtension',Var('?Input'),'pdf'],
	  @_,
	 )
       },
    ),
    hasPDFMIMEType => FRDCSA::IAEC::EdgeFunction->new
    (
     Name => 'hasPDFMIMEType',
     Precondition => sub { IsStringP(@_); },
     MetadatumPrecondition => [['hasExtension',Var('?Input'),'pdf'],['unknown',['hasMIMEType',Var('?Input'),'pdf']]],
     EdgeFunction => sub {
       require String::ShellQuote;
       String::ShellQuote->import(qw(shell_quote));
       my $c = 'file -b '.shell_quote($_[0]);
       my $r = `$c`;
       return $r =~ /^PDF document/;
     },
     Effect => sub {ProcessEffectForPredicate(@_)},
     MetadatumEffect => sub {
       ProcessMetadatumEffectForPredicate
	 (
	  ValueForTrue => ['hasMIMEType',Var('?Input'),'pdf'],
	  @_,
	 )
       },
    ),
    pdfAlreadyHasTextFile => FRDCSA::IAEC::EdgeFunction->new
    (
     Name => 'pdfAlreadyHasTextFile',
     Precondition => sub { IsStringP(@_); },
     MetadatumPrecondition => [['hasMIMEType',Var('?Input'),'pdf'],['unknown',['hasCorrespondingTextFile',Var('?Input')]]],
     EdgeFunction => sub {
       my $fn = $_[0];
       $fn =~ s/\.([^\.]+)$/.txt/;
       -f $fn;
     },
     Effect => sub {ProcessEffectForPredicate(@_)},
     MetadatumEffect => sub {
       ProcessMetadatumEffectForPredicate
	 (
	  ValueForTrue => ['hasCorrespondingTextFile',Var('?Input')],
	  @_,
	 )
       },
    ),
    # generateCorrespondingTextFileToPDF => FRDCSA::IAEC::EdgeFunction->new
    # (
    #  Name => 'generateCorrespondingTextFileToPDF',
    #  Precondition => sub { IsStringP(@_); },
    #  MetadatumPrecondition => [['neg',['hasCorrespondingTextFile',Var('?Input')]]],
    #  EdgeFunction => sub {
    #    require String::ShellQuote;
    #    String::ShellQuote->import(qw(shell_quote));
    #    my $c = 'pdftotext '.shell_quote($_[0]);
    #    my $r = `$c`;
    #    my $fn = $_[0];
    #    $fn =~ s/\.([^\.]+)$/.txt/;
    #    return -f $fn;
    #  },
    #  Effect => sub {ProcessEffectForPredicate(@_)},
    #  MetadatumEffect => sub {
    #    ProcessMetadatumEffectForPredicate
    # 	 (
    # 	  # Retract => [['neg',['hasCorrespondingTextFile',Var('?Input')]]],
    # 	  ValueForTrue => ['hasCorrespondingTextFile',Var('?Input')],
    # 	  @_,
    # 	 )
    #    },
    # ),
   },
   NodeDataAndMetadataList =>
   [
    $nodedatumandmetadatum,
   ],
  );


my $candidates = $iaec->CollectCandidates
  (
   Method => 'AIProlog',
   NodeDatumAndMetadatum => $nodedatumandmetadatum,
  );
my $numcandidates = scalar keys %$candidates;
while ($numcandidates > 0) {
  print "#Candidates: <<<$numcandidates>>>\n" if $UNIVERSAL::debug > 3;
  $iaec->Fire
    (
     Method => 'AIProlog',
     Candidates => $candidates,
     NodeDatumAndMetadatum => $nodedatumandmetadatum,
    );
  $candidates = $iaec->CollectCandidates
    (
     Method => 'AIProlog',
     NodeDatumAndMetadatum => $nodedatumandmetadatum,
    );
  $numcandidates = scalar keys %$candidates;
}

print Dumper($iaec) if $UNIVERSAL::debug > 3;
$iaec->ShowObjectsAndFactbases
  (
   Method => 'AIProlog',
  );

# my $candidates = $iaec->CollectCandidates
#   (
#    Method => 'AIProlog',
#    NodeDatumAndMetadatum => $nodedatumandmetadatum,
#   );
# my $numcandidates = scalar keys %$candidates;
# while ($numcandidates > 0) {
#   print "#Candidates: <<<$numcandidates>>>\n";
#   $iaec->Fire
#     (
#      Method => 'AIProlog',
#      Candidates => $candidates,
#      NodeDatumAndMetadatum => $nodedatumandmetadatum,
#     );
#   $candidates = $iaec->CollectCandidates
#     (
#      Method => 'AIProlog',
#      NodeDatumAndMetadatum => $nodedatumandmetadatum,
#     );
#   $numcandidates = scalar keys %$candidates;
# }



# # some things that need to be done - YASWI is too slow here.  We need
# # pengines integration, but that's blocking on this issue:
# # https://github.com/simularity/JavaPengine/issues/3

# # also our persistence is not very fast, maybe use data-integration
# # SWIPL MySQL ODBC integration to be faster, need to finish that

# # go through each file and directory

# # prove things that are true about it

# foreach my $filename (split /\n/, `ls ~/`) {
#   print "<$filename>\n";
#   Analyze
#     (
#      Data => '/home/andrewdo/Users_Interest_from_Social_Networks_SIGIR19.pdf',
#      Metadata => [
# 		  ['isa',Var('?DataPoint'),'filename'],
# 		  ['fileContains',['fileFn',Var('?DataPoint')],'researchPaper'],
# 		 ],
#     );
# }

# # have type prerequisites on tests
# # have expected timing on tests, worst-case, etc
# # have composite tests

# # have multiple answer types


# my $knowledge = [
# 		 "(implies (or (IsFileP ?Input) (IsDirP ?Input)) (ExistsP ?Input))",
# 		 "(implies (FilenameP ?Input) (and (propose-test IsDirectoryP ?Input) (propose-test DirTest ?Input)))",
# 		 "(implies (IsDirP ?Input) (queue-test DirTest ?Input))",
# 		];

# propose tests
